
                                                Node js Content
                                                ===============

1) what is nodejs?

Node.js is a JavaScript runtime environment that allows you to run JavaScript code outside of a web browser. It is built on Chrome’s V8 JavaScript engine & C++ and is commonly used for backend development to build scalable and high-performance web & mobile applications.

2) Node js architecture?

Node js contains v8 engine and c++, Node js is a runtime environment for js. By using js we can work with node environment.


3) How nodejs works?

Node.js follows a Single-Threaded Event Loop architecture, which allows it to handle multiple requests efficiently using asynchronous, non-blocking I/O operations. This makes it highly scalable for real-time applications.

How Node.js Works Step-by-Step:

1️.Client Request Comes In:
  A user requests a resource (e.g fetching data from a database).

2️.Event Loop Receives the Request:
  The request is sent to the event loop, which determines if it’s a simple or complex task.
  Simple tasks (e.g processing small data): Handled directly by the event loop.
  Complex tasks (e.g database queries, file system operations): Sent to worker threads.

3️.Non-Blocking I/O Operations:
  Heavy operations (e.g database queries, file reads) are delegated to worker threads.
  The event loop does not block and continues handling other incoming requests.

4️.Callback Execution:
  Once the worker thread completes the task, the result is added to the callback queue.
  The event loop picks the task from the callback queue and executes the associated callback function.

5️.Response Sent to Client:
  Once the callback is executed, the final response is sent back to the client.


4) how to install node js & run node js?

   download node from node.org & install node in our system.

5) How to write first program in node js?

   create a parent (root) js file& write some js code.

   node jsfilename

=> Module system in node js
   ------------------------

  global Object in nodejs
  -----------------------

- In Node.js, the global object is an object that is available everywhere in your application without      needing to import or require it. It is similar to window in the browser but is named global in Node.js

- We don’t have the window object in Node. 

- The global object in Node is “global”.
 
- Unlike browser applications, variables we define are not added to the “global” 
  object. 

  What is module?
  -------------- 
- Every file in a Node application is a module. Node automatically wraps the code 
  in each file with an IIFE (Immediately-invoked Function Expression) to create 
  scope. So, variables and functions defined in one file are only scoped to that file 
  and not visible to other files unless explicitly exported. 

- To export a variable or function from a module, you need to add them to 
  module.exports: 

- In Node.js, every module is wrapped inside a Module Wrapper Function before execution. This function     provides a private scope for each module,preventing variable conflicts and allowing better modularity.

  What is the Module Wrapper Function?

  When you create a Node.js module, it is automatically wrapped in a function like this:

  (function(exports, require, module, __filename, __dirname) {
    // Your module code here
  });

  Provides Useful Arguments:

  exports → A shortcut for module.exports (used for exporting module functionality).
  require → Used to import other modules.
  module → Represents the current module and helps in exporting functionality.
  __filename → The absolute path of the current module file.
  __dirname → The directory name of the current module file.

  module.exports.sayHello = sayHello; 
 
  How to load module?
  ------------------

- To load a module, use the require function. This function returns the 
  module.exports object exported from the target module: 

  const logger = require(‘./logger’);

  Built in modules
  ----------------

- Node has a few built-in modules that enable us to work with the file system, path 
  objects, network, operating system, etc. 

  os module
  ---------
  The os module in Node.js is a built-in module that provides information about the operating system,      such as CPU, memory, network interfaces, and more. It helps developers interact with the system on       which their Node.js application is running.

  const os = require('os');

  console.log("Operating System:", os.platform());
  console.log("Architecture:", os.arch());
  console.log(os.hostname());
  console.log("Total Memory:", os.totalmem());
  console.log("Free Memory:", os.freemem());
  console.log("Uptime (seconds):", os.uptime());
  console.log("CPU Info:", os.cpus());
  console.log("Network Interfaces:", os.networkInterfaces());

  fs module
  ---------

  The fs (File System) module in Node.js is a built-in module that allows developers to interact with      the file system. It can be used to read, write, update, delete, and manage files and directories.

  The fs module provides both synchronous and asynchronous methods. Asynchronous methods are preferred     for non-blocking operations.

  Reading a File - fs.readFile()
  Writing file   - fs.writeFile()
  Appending file - fs.appendFile()
  Deleting file  - fs.unlink()
  Creating Dir   - fs.mkdir()
  Removing a Directory - fs.rmdir()
  Checking File Exists - fs.access()
  Renaming a File      - fs.rename()


  path module
  -----------

  The path module in Node.js is a built-in module used for working with file and directory paths.

  path.basename()

  Returns the last part (file name) of a given path.

  path.dirname()

  Returns the directory name of a given path.

  path.extname()

  Returns the file extension from a given path.


  events module
  -------------

  The events module in Node.js allows us to create and handle custom events. It follows the Observer       pattern, where an EventEmitter object emits events and listeners respond to those events.

- EventEmitter is one of the core classes in Node that allows us to raise (emit) and 
  handle events. Several built-in classes in Node derive from EventEmitter. 

  How to Use the events Module?

const EventEmitter = require('events');

1. Creating an Event Emitter:

The EventEmitter class is used to create an event emitter instance.


const eventEmitter = new EventEmitter();

2. Registering an Event Listener

Use .on() or .addListener() to listen for an event.

eventEmitter.on('greet', () => {
    console.log('Hello, Node.js!');
});

3. Emitting an Event

Use .emit() to trigger an event.

eventEmitter.emit('greet'); // Output: Hello, Node.js!

4. Passing Arguments to Events

We can pass data when emitting an event.

eventEmitter.on('greetUser', (name) => {
    console.log(`Hello, ${name}!`);
});

eventEmitter.emit('greetUser', 'Alice'); // Output: Hello, Alice!

5. Listening to an Event Only Once

Use .once() to register a listener that executes only once.

eventEmitter.once('firstTime', () => {
    console.log('This event will run only once.');
});

eventEmitter.emit('firstTime'); // Output: This event will run only once.
eventEmitter.emit('firstTime'); // No output

6. Removing an Event Listener

Use .off() or .removeListener() to remove a specific listener.


const greet = () => console.log('Hello again!');
eventEmitter.on('sayHello', greet);

eventEmitter.emit('sayHello'); // Output: Hello again!

eventEmitter.off('sayHello', greet);
eventEmitter.emit('sayHello'); // No output


  http module
  -----------

 - The http module in Node.js is a built-in module that allows you to create and manage HTTP servers and    clients. It is used to handle requests and responses over the HTTP protocol.

   A client (browser, Postman, or another server) sends an HTTP request to the Node.js server.
   The http module listens for the request.
   The server processes the request and sends a response.
   The client receives the response.


  A simple HTTP server can be created using http.createServer():


  const http = require('http');

  const server = http.createServer((req, res) => {
     if(req.url === '/'){
      res.write('hello');
      res.end()
     }
     if(req.url === '/products'){
      res.write([{name: 'apple', price: 100}]);
      res.end()
     }
  });

  server.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
  });



NODE PACKAGE MANAGER (NPM)
==========================

NPM (Node Package Manager) is the default package manager for Node.js. It helps developers install, manage, and share JavaScript libraries efficiently.


Key Features of NPM
-------------------

Package Management – Install, update, and remove packages.
Dependency Management – Tracks all installed libraries in package.json.
Script Automation – Run scripts for building, testing, and deploying apps.
Version Control – Lock versions to maintain project stability.
Global & Local Installation – Install tools for a project or system-wide.

Basic NPM Usage
---------------

-Check If NPM is Installed
 -------------------------

npm -v   # Displays NPM version
node -v  # Displays Node.js version (since NPM comes with Node.js)

-Initialize a Project
 --------------------

Creates a package.json file that stores project dependencies and settings. It contains project meta data

npm init      # Step-by-step configuration
npm init -y   # Auto-generate package.json with default values

- Every Node application has a package.json file that includes metadata about the 
  application. This includes the name of the application, its version, dependencies, 
- We use NPM to download and install 3rd-party packages from NPM registry: 
- All the installed packages and their dependencies are stored under 
  node_modules folders. This folder should be excluded from the source control.
- Node packages follow semantic versioning: major.minor.patch

-Install Packages
 ----------------

npm install <package>       # Installs a package (locally)
npm install -g <package>    # Installs a package globally
npm install <package>@<ver> # Installs a specific version
npm install                 # Installs all dependencies listed in package.json

-How to use package
 ------------------

 var variablename = require('packagename')

-package dependencies
 --------------------

 node_modules contains packages dependencies and it contains inter dependencies.

-How to ignore specific file or folder from sending to github
 ------------------------------------------------------------

  .gitignore file

   node_modules/

-Semantic version
 ----------------

^ (Caret)	^1.2.3	Updates minor and patch versions, but keeps the major version fixed (1.x.x)
~ (Tilde)	~1.2.3	Updates only patch versions, keeping both major and minor versions fixed (1.2.x)

-Listout installed packages
 --------------------------

  npm list --depth=0

-How to view packages info
 -------------------------

 npm view packagename

 npm view packagename dependencies

 npm view packagename versions

-Uninstall Packages
 ------------------

npm un (or) uninstall <package>    # Removes a package
npm un (or) uninstall -g <package> # Removes a globally installed package

-How to find outdated packages
 -----------------------------

npm outdated

-Update Packages
 ---------------

npm update <package>  # Updates a specific package
npm update            # Updates all dependencies

To update major version
-----------------------

npm i -g npm-check-updates

npm-check-updates

npm-check-updates -u


-How to install Dev dpendencies
 ------------------------------

 npm i packagename --save-dev

-Run Scripts (Defined in package.json)

"scripts": {
  "start": "node app.js",
  "dev": "nodemon app.js"
}

-Run commands:

npm start   # Runs "start" script
npm run dev # Runs "dev" script

-How to publish own modules
 --------------------------
 
 First you should have npm account

 npm login

 npm publish (It will be published in npm js)

 we can use published module in our other project

 npm i packagename

-How to update published package
 -------------------------------

 npm version major/minor/patch

 npm publish

-Clear Cache (Fix Issues)
-------------------------

npm cache clean --force

is used to clear the npm cache forcibly. Here’s a breakdown:

npm cache clean → Clears the npm cache.

force → Forces the operation (necessary since npm doesn’t allow full cache clearing without it).

When to Use It:

If you encounter corrupted cache issues (e.g., packages not installing properly).
When dependencies behave unexpectedly, and a clean reinstall is needed.
If npm install is failing due to cache-related errors.



Expess JS
=========

What is Express.js?

Express.js is a fast, unopinionated, and minimalist web framework for Node.js used to build web applications and APIs. It simplifies the process of handling HTTP requests, defining routes, and integrating middleware.

How to build server & api
-------------------------
npm install express

Create the Express Server
-------------------------
const express = require('express');

const app = express();

creating api 
------------

app.get('/', (req, res) => {
    res.send('Welcome to the eCommerce API!');
});

Start the server
----------------
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});



Nodemon
-------

nodemon is a tool that automatically restarts your Node.js application whenever it detects file changes. This saves time by eliminating the need to manually stop and restart the server after every code modification.

You can install nodemon globally (to use in any project) or locally (for a specific project).

 - Install Globally (Recommended)

   npm install -g nodemon
   
   This allows you to run nodemon in any project.

   Install Locally (For a Specific Project)

-  npm install --save-dev nodemon

   This adds nodemon as a dev dependency in your package.json file.

Instead of running:

- node server.js

- nodemon server.js

Now, whenever you edit and save server.js, nodemon will automatically restart the server.

Configure nodemon in package.json
---------------------------------

You can update package.json to always use nodemon:

Update the "scripts" section like this:

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}

Now, run:
---------
npm run dev

This will start the server with nodemon.

Why Use nodemon?

 -Auto-restarts the server when code changes
 -Faster development (no need to restart manually)


Environmental variables
-----------------------

How to Use Environmental Variables in Node.js?

Step 1: Install dotenv Package
------------------------------

dotenv loads environment variables from a .env file into process.env. Install it using:

npm install dotenv

Step 2: Create a .env File
--------------------------

In your project root, create a .env file and add key-value pairs:

PORT=5000

MONGO_URI=mongodb+srv://your_username:your_password@cluster.mongodb.net/ecommerce

JWT_SECRET=mysecretkey

**Never commit the .env file to GitHub! Add it to .gitignore.

Step 3: Load .env in server.js
------------------------------

Modify your server.js to load .env variables:


require('dotenv').config();

const express = require('express');

const app = express();


Step 4: Access Environment Variables
------------------------------------

You can access variables anywhere in your code using process.env.VARIABLE_NAME:

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});



Note:

process.env is a global object in Node.js that allows you to access environment variables. It is used to store configuration settings like database connections, API keys, and secret tokens without hardcoding them in your source code.
Now, you can access environmental variables anywhere in your code using process.env


In a local development environment, we use .env files, but in production, we set these variables directly in the hosting platform.

Since environment variables are set in the hosting platform, you do not need to upload your .env file.
Make sure .env is in .gitignore to prevent it from being pushed to GitHub.



1. Deploying on Vercel
----------------------

Vercel is great for hosting small Node.js applications.

Step 1: Install Vercel CLI
--------------------------

npm install -g vercel

Step 2: Login to Vercel
-----------------------

vercel login

Step 3: Deploy Your Project
---------------------------

Navigate to your project directory:

vercel

Step 4: Add Environment Variables in Vercel
-------------------------------------------

Go to Vercel Dashboard → Select your project
Click Settings → Environment Variables
Add your variables

PORT=5000
MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret
STRIPE_SECRET_KEY=your_stripe_key

Deploy again:
-------------

vercel --prod


Parameters
==========

In Express.js, route parameters and query parameters are two ways to pass data in a URL. They serve different purposes and are accessed differently in your Express routes.


Route Parameters (req.params)
-----------------------------

-What are Route Parameters?

Route parameters are part of the URL path.
They are used to identify specific resources (e.g., user ID, product ID).
Defined using : (colon) in the route definition.
They are accessed using req.params.

const express = require('express');
const app = express();

// Route with a parameter ":id"

 app.get('/user/:id', (req, res) => {
    res.send(`User ID: ${req.params.id}`);
});

app.listen(5000, () => console.log('Server running on port 5000'));

Use Cases of Route Parameters
-----------------------------

 - Fetching details of a specific user, product, or order
 - Updating or deleting a resource using an ID


Query Parameters (req.query)
----------------------------

Query parameters are key-value pairs added after ? in the URL.

Used for search, filtering, pagination, and optional parameters.

Accessed using req.query in Express.

const express = require('express');
const app = express();

app.get('/search', (req, res) => {
    const name = req.query.name;
    const age = req.query.age;
    res.send(`Searching for name: ${name}, age: ${age}`);
});

app.listen(5000, () => console.log('Server running on port 5000'));

Use Cases of Query Parameters
-----------------------------
- Filtering products (/products?category=electronics&price=low)
- Pagination (/posts?page=2&limit=10)
- Searching (/users?name=John)


HTTP CALLS (API CALLS)
----------------------

-getAll resources

app.get('/products', (req, res)=>{})

-getSingle resource

app.get('/products/id', (req, res)=>{})

-post resource

app.post('/products', (req, res)=>{})

-update resouce

app.put('/products/id', (req, res)=>{})

-delete resouce

app.delete('/products/id', (req, res)=>{})

input validation
----------------

You should never trust data sent by the client. Always validate! Use Joi package 
to perform input validation.

To validate input data from client use joi library instead of manual validation.


const Joi = require('joi');

const schema = Joi.object({
  name: Joi.string().min(3).required(),
  email: Joi.string().email().required(),
});

const { error } = schema.validate(req.body);

if (error) return res.status(400).json({ message: error.details[0].message });


Middlewares in express
----------------------

Middleware
----------

-It is a function, It takes a request object, and either returns a response to client or passes control   to another middleware function.

-Middleware in Express.js is a function that sits between the request and response cycle. It processes    the request before it reaches the final route handler or modifies the response before sending it back    to the client.


app.use
-------

-app.use() registers middleware functions.
-Middleware runs before route handlers functions.
-It can be used for logging, authentication, error handling, parsing request data, etc.
-It can be applied to all routes or specific routes.

Custom Middleware
-----------------
Middleware that you write yourself to handle specific application logic.

 Ex: Authentication, Logging, Error Handling

Use Case:
--------

Security (e.g., authentication, role-based access)
Logging (e.g., tracking user requests)
Custom error handling


Built-in Middleware
-------------------
Middleware provided by Express.js for common tasks.

Express provides predefined middleware functions to handle common operations like parsing request bodies or serving static files.

Examples of Built-in Middleware:

express.json() – Parses incoming JSON requests. (Parse JSON data)
express.urlencoded({ extended: true }) – Parses URL-encoded form data. (Parse form data)
express.static('public') – Serves static files like images, CSS, JavaScript. (Serve static files)

Use Case:
--------

Handling request data (JSON)
Serving static files (CSS, images, JavaScript)
Processing URL-encoded payloads.


Third-Party Middleware
----------------------
Third-party middleware is installed via npm to add extra functionalities like CORS, security, 

 Ex: cors, morgan, helmet, body-parcer,

cors – Enables cross-origin requests.
morgan – Logs HTTP requests.
helmet – Secures HTTP headers.

helmet is a middleware for security in Express.js. It helps protect your app from common web vulnerabilities by setting various HTTP headers.

helmet is an essential middleware for securing Express apps.
It sets various HTTP headers to protect against XSS, clickjacking, MIME sniffing, and more.
Highly recommended for any production application.

By default, helmet() enables multiple security-related headers:


How to set environmets
----------------------
In Express.js, environment variables help manage different settings for development, testing, and production environments. The most common way to manage them is using process.env and a .env file.


Create a .env File in the Project Root
--------------------------------------

PORT=5000
NODE_ENV=production
DB_URL=mongodb://localhost:27017/mydatabase
SECRET_KEY=mysecretpassword


Setting Environment Variables Manually
--------------------------------------

If you don’t use .env, you can set environment variables manually in the terminal:

On Windows (Command Prompt)

set PORT=4000
set NODE_ENV=production

Node.js provides process.env to access environment variables.

app.get('/', (req, res) => {
  res.send(`Running in ${process.env.NODE_ENV || 'development'} mode`);
});


*** You can use different .env files for development, production, and testing. ***


Template Engine
---------------

A template engine like EJS, Pug, or Handlebars is useful when:

You are building server-side rendered (SSR) web pages.
You need dynamic HTML with variables from the backend.

You don’t need a template engine if:
------------------------------------

You are building a REST API (JSON responses).
You are using a frontend framework like React, Angular, or Vue.
You are serving a static website with express.static().


Database Integration
--------------------

We have to install drivers in node js to work with databases for various databases


Authentication & Authorization
------------------------------

How to secure API end points



Express Router
==============

express.Router() allows you to create modular, mountable route handlers in Express.js. It helps keep your routes organized and maintainable by separating them into different files.

const express = require('express');
const router = express.Router();

-export the router

module.exports = router;

-Import the router

const userRoutes = require('./routes/userRoutes');

-Use the router with a base path

app.use('/users', userRoutes);



synchronous and asynchronous programing
=======================================

Node.js is single-threaded and non-blocking, which makes it efficient for handling I/O operations. However, it supports both synchronous and asynchronous execution.


1. Synchronous Execution (Blocking)

- Executes code line by line.
- Each operation must complete before moving to the next one.
- Blocks the event loop if an operation takes a long time.

Example (Synchronous File Read)
const fs = require('fs');

console.log("Start");
const data = fs.readFileSync('file.txt', 'utf8'); // Blocking
console.log(data);
console.log("End");

-The execution pauses at `readFileSync` until the file is completely read.


2.Asynchronous Execution (Non-Blocking)

- Operations run in the background.
- Execution continues without waiting.
- Uses callbacks, promises, and async/await to handle results.

A. Using Callbacks

A callback function is passed as an argument and executes after an operation completes.

Example (Asynchronous File Read - Callback)

const fs = require('fs');

console.log("Start");
fs.readFile('file.txt', 'utf8', (err, data) => {
    if (err) {
        console.error(err);
        return;
    }
    console.log(data);
});
console.log("End");

Output (Non-blocking)

Start
End
(file content here)

Problem with Callbacks: If you have multiple nested callbacks, it leads to "Callback Hell", making the code hard to read.


B. Using Promises

A Promise represents a value that might be available now, later, or never.

Example (Using Promises)

const fs = require('fs').promises;

console.log("Start");
fs.readFile('file.txt', 'utf8')
    .then(data => console.log(data))
    .catch(err => console.error(err));
console.log("End");

Advantage: Avoids callback hell, improves readability.

C. Using Async/Await (Best Approach)
async/await makes asynchronous code look like synchronous code.

Example (Using Async/Await)

const fs = require('fs').promises;

async function readFile() {
    try {
        console.log("Start");
        const data = await fs.readFile('file.txt', 'utf8');
        console.log(data);
        console.log("End");
    } catch (err) {
        console.error(err);
    }
}

readFile();

Benefits of Async/Await

- Cleaner syntax.
- Easier error handling using `try...catch`.


| Feature        | Callbacks          | Promises           | Async/Await        |
|---------------|-------------------|-------------------|-------------------|
| Readability   | Low (Callback Hell) | Moderate (Chained `.then()`) | High (Simple & Clean) |
| Error Handling | Nested callbacks | `.catch()` method | `try...catch` |
| Debugging     | Harder | Easier | Easiest |

When to Use What?
-----------------
- Use Callbacks when working with older APIs that do not support promises.
- Use Promises when handling multiple async tasks (e.g., chaining multiple API calls).
- Use Async/Await for cleaner, more readable code.




What is MongoDB
===============

MongoDB is a NoSQL database that stores data in a document-oriented format, meaning it uses JSON-like documents instead of traditional relational tables. It is designed for scalability, flexibility, and high performance.

Key Features of MongoDB:

- Document-based Storage: Stores data in BSON (Binary JSON) format.
- Schema-less: No predefined schema, making it flexible.
- Scalability: Supports horizontal scaling via sharding.
- Indexing: Supports various types of indexes for faster queries.
- High Availability: Uses replication for data redundancy.
- Aggregation Framework: Provides powerful data processing features.

---

Why Use MongoDB?

MongoDB is chosen over traditional relational databases (like MySQL or PostgreSQL) when:
1. Flexible Schema is needed (e.g., dynamic or changing data structures).
2. High Write & Read Performance is required.
3. Scalability is a priority (for big data applications).
4. Handling Large Amounts of Unstructured Data (e.g., IoT, analytics, logs).
5. Cloud & Big Data Applications need distributed storage.

---

When to Use MongoDB?

Best for:

- E-commerce platforms.
- Social media applications.
- Real-time analytics.
- IoT and big data applications.
- Content management systems.


To install and set up MongoDB on a **Windows system**, follow these steps:


Step 1: Download MongoDB

1. Visit the [MongoDB Community Edition Download page](https://www.mongodb.com/try/download/community).
2. Select:
   - Version: Choose the latest stable version.
   - Platform: Windows.
   - Package: MSI (Recommended).
3. Click Download and wait for the installer to complete.


Step 2: Install MongoDB

1. Run the MSI installer that you downloaded.
2. In the MongoDB Setup Wizard:
   - Click Next.
   - Accept the License Agreement → Click Next.
   - Choose Complete Installation.
   - Ensure Run MongoDB as a Service is checked.
   - Click Install and wait for the installation to complete.
   - Click Finish after installation.

Step 3: Add MongoDB to System PATH

To use MongoDB commands from any directory in the Command Prompt:
1. Open File Explorer and navigate to:
  
   C:\Program Files\MongoDB\Server\<your-version>\bin
  
2. Copy the full path.
3. Add it to the Windows PATH:
   - Press `Win + R`, type `sysdm.cpl`, and press Enter.
   - Go to Advanced → Click Environment Variables.
   - Under System variables, find `Path`, select it, and click Edit.
   - Click New, paste the copied MongoDB `bin` path, and click OK.



Step 4: Create a MongoDB Data Directory

MongoDB stores data in `/data/db`, which needs to be created manually:
1. Open Command Prompt (cmd) as Administrator.
2. Run:
   mkdir C:\data\db
3. This creates the required data directory for MongoDB.

Step 5: Start MongoDB

1. Open ommand Prompt.
2. Run:
   mongod
   
3. If everything is set up correctly, you should see a message indicating that MongoDB is running.


Step 6: Verify MongoDB Installation

1. Open another Command Prompt and type:
  
   mongo
   
2. If MongoDB is running correctly, it will open the MongoDB shell.

Step 8: Connect to MongoDB

To connect your application to MongoDB, use the default connection string:

mongodb://localhost:27017


Mongodb atlas
=============

MongoDB Atlas is a cloud-based MongoDB service that provides a fully managed database.

Step 1: Create a MongoDB Atlas Account

Step 2: Create a New Cluster

Step 3: Set Up Database Access

Step 4: Allow Network Access

Step 5: Connect to Your Cluster


Install mongodb compass
=======================

By using mongodb compass client can connet directly with mongodb server, without open server everytime.



What is Mongoose?
================

Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It provides a structured way to define schemas, validate data, and interact with MongoDB using JavaScript. 


Why Use Mongoose?
================
Mongoose simplifies working with MongoDB by providing:

-Schema-based modeling – Defines a structured format for data.
-Data validation – Ensures only valid data is stored in MongoDB.
-Middleware – Runs functions before/after saving documents.
-Built-in query functions – Provides an easier way to query data.
-Relationships & Population – Supports referencing documents like SQL joins.


How to Use Mongoose?
===================

1)Connect to MongoDB
--------------------

const mongoose = require("mongoose");

mongoose.connect("mongodb://localhost:27017/mydatabase", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("MongoDB Connected"))
.catch(err => console.error("Connection Error:", err));

2) Define a Schema
------------------

A schema is a blueprint for documents in a MongoDB collection.

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  age: { type: Number, min: 18 },
  createdAt: { type: Date, default: Date.now }
});

3) Create a Model
-----------------

A model is a constructor that creates documents based on the schema.


const User = mongoose.model("User", userSchema);


4) Create / get / update / delete document in momgodb
   --------------------------------------------------

CRUD Operations in MongoDB (Create, Read, Update, Delete)

You can perform CRUD operations in MongoDB using Mongoose in a Node.js application.


CRUD Operations in MongoDB (Create, Read, Update, Delete)
 
You can perform CRUD operations in MongoDB using Mongoose in a Node.js application.  

Step 1: Install & Connect to MongoDB

Install Mongoose

Run the following command in your Node.js project:  

npm install mongoose

Connect to MongoDB (Local or Atlas)

const mongoose = require("mongoose");

mongoose.connect("mongodb://localhost:27017/mydatabase", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log("MongoDB Connected"))
.catch(err => console.error("Connection Error:", err));

For MongoDB Atlas, replace "mongodb://localhost:27017/mydatabase" with your Atlas connection string.

Step 2: Define a Schema & Model

Create a `models/user.js` file:

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    age: { type: Number, min: 18 },
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model("User", userSchema);

module.exports = User;

Step 3: CRUD Operations

Create a Document (Insert)

const User = require("./models/user");

Create a new user

const createUser = async () => {
    try {
        const newUser = new User({ name: "John Doe", email: "john@example.com", age: 25 });
        const savedUser = await newUser.save();
        console.log("User Created:", savedUser);
    } catch (error) {
        console.error("Error creating user:", error);
    }
};

createUser();

Read Documents (Find)

const getUsers = async () => {
    try {
        const users = await User.find(); // Get all users
        console.log("Users:", users);
    } catch (error) {
        console.error("Error fetching users:", error);
    }
};

getUsers();

Find Specific User

const getUserByEmail = async (email) => {
    try {
        const user = await User.findOne({ email });
        console.log("User Found:", user);
    } catch (error) {
        console.error("Error finding user:", error);
    }
};

getUserByEmail("john@example.com");


Update a Document

const updateUser = async (email, newAge) => {
    try {
        const updatedUser = await User.findOneAndUpdate(
            { email },  // Find user by email
            { age: newAge },  // Update field
            { new: true }  // Return updated document
        );
        console.log("User Updated:", updatedUser);
    } catch (error) {
        console.error("Error updating user:", error);
    }
};

updateUser("john@example.com", 30);


Delete a Document

const deleteUser = async (email) => {
    try {
        const deletedUser = await User.findOneAndDelete({ email });
        console.log("User Deleted:", deletedUser);
    } catch (error) {
        console.error("Error deleting user:", error);
    }
};

deleteUser("john@example.com");











